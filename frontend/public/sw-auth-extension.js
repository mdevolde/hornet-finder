// Service Worker personnalis√© pour la gestion avanc√©e des tokens d'authentification
// Ce fichier sera inject√© dans le service worker g√©n√©r√© par Vite PWA

// √âtat global du service worker pour l'authentification
let authState = {
  isAuthenticated: false,
  expiresAt: null,
  lastSync: null,
  profile: null
};

// Configuration
const TOKEN_CHECK_INTERVAL = 2 * 60 * 1000; // 2 minutes
const TOKEN_WARNING_THRESHOLD = 5 * 60 * 1000; // 5 minutes avant expiration

console.log('üîß Service Worker Auth Extension charg√©');

// √âcouter les messages de l'application principale
self.addEventListener('message', (event) => {
  const { type, payload } = event.data || {};

  switch (type) {
    case 'SYNC_AUTH_STATE':
      handleAuthStateSync(payload);
      break;
    
    case 'AUTH_STATUS_UPDATE':
      handleAuthStatusUpdate(payload);
      break;
    
    case 'TOKEN_EXPIRING_SOON':
      handleTokenExpiringSoon(payload);
      break;
    
    case 'GET_AUTH_STATE':
      // R√©pondre avec l'√©tat actuel
      event.ports[0]?.postMessage({
        type: 'AUTH_STATE_RESPONSE',
        payload: authState
      });
      break;
  }
});

// Gestion de la synchronisation de l'√©tat d'authentification
function handleAuthStateSync(payload) {
  console.log('üîÑ Synchronisation de l\'√©tat d\'authentification:', payload);
  
  if (payload?.authState) {
    authState = {
      ...authState,
      ...payload.authState,
      lastSync: Date.now()
    };
    
    console.log('‚úÖ √âtat d\'authentification mis √† jour:', authState);
    
    // Programmer la v√©rification proactive si n√©cessaire
    scheduleTokenCheck();
  }
}

// Gestion des mises √† jour d'√©tat simples
function handleAuthStatusUpdate(payload) {
  console.log('üìä Mise √† jour du statut d\'authentification:', payload);
  
  authState.isAuthenticated = payload?.isAuthenticated || false;
  authState.lastSync = payload?.timestamp || Date.now();
  
  if (!authState.isAuthenticated) {
    // R√©initialiser l'√©tat si plus authentifi√©
    authState.expiresAt = null;
    authState.profile = null;
  }
}

// Gestion des tokens qui expirent bient√¥t
function handleTokenExpiringSoon(payload) {
  console.log('‚ö†Ô∏è Token expire bient√¥t:', payload);
  
  // Notifier l'application principale
  broadcastToClients({
    type: 'TOKEN_EXPIRING',
    payload: {
      expiresAt: payload?.expiresAt,
      timeUntilExpiry: payload?.timeUntilExpiry
    }
  });
  
  // Programmer une v√©rification plus fr√©quente
  scheduleTokenCheck(30000); // Toutes les 30 secondes
}

// Programmer la v√©rification des tokens
let tokenCheckTimeout = null;

function scheduleTokenCheck(interval = TOKEN_CHECK_INTERVAL) {
  // Annuler la v√©rification pr√©c√©dente
  if (tokenCheckTimeout) {
    clearTimeout(tokenCheckTimeout);
  }
  
  tokenCheckTimeout = setTimeout(() => {
    checkTokenStatus();
  }, interval);
}

// V√©rifier l'√©tat des tokens
function checkTokenStatus() {
  if (!authState.isAuthenticated || !authState.expiresAt) {
    // Reprogrammer une v√©rification plus tardive
    scheduleTokenCheck();
    return;
  }
  
  const now = Date.now();
  const expiresAt = authState.expiresAt * 1000; // Convertir en millisecondes
  const timeUntilExpiry = expiresAt - now;
  
  console.log(`üïê V√©rification du token: expire dans ${Math.round(timeUntilExpiry / 1000 / 60)} minutes`);
  
  if (timeUntilExpiry <= 0) {
    // Token expir√©
    console.log('‚ùå Token expir√©');
    authState.isAuthenticated = false;
    authState.expiresAt = null;
    
    broadcastToClients({
      type: 'AUTH_ERROR',
      payload: { reason: 'TOKEN_EXPIRED' }
    });
    
  } else if (timeUntilExpiry <= TOKEN_WARNING_THRESHOLD) {
    // Token expire bient√¥t
    console.log('‚ö†Ô∏è Token expire bient√¥t, notification aux clients');
    
    broadcastToClients({
      type: 'TOKEN_EXPIRING',
      payload: {
        expiresAt: authState.expiresAt,
        timeUntilExpiry
      }
    });
    
    // V√©rifier plus fr√©quemment
    scheduleTokenCheck(30000);
  } else {
    // Token encore valide, v√©rification normale
    scheduleTokenCheck();
  }
}

// Diffuser un message √† tous les clients connect√©s
function broadcastToClients(message) {
  self.clients.matchAll({ type: 'window' }).then((clients) => {
    clients.forEach((client) => {
      try {
        client.postMessage(message);
      } catch (error) {
        console.warn('Erreur lors de l\'envoi de message au client:', error);
      }
    });
  });
}

// Gestion des √©v√©nements de cycle de vie
self.addEventListener('activate', (event) => {
  console.log('üöÄ Service Worker Auth Extension activ√©');
  
  // Prendre le contr√¥le imm√©diatement
  event.waitUntil(self.clients.claim());
});

// Gestion de la synchronisation en arri√®re-plan (si support√©e)
if ('sync' in self.registration) {
  self.addEventListener('sync', (event) => {
    if (event.tag === 'auth-check') {
      console.log('üîÑ Synchronisation en arri√®re-plan d√©clench√©e');
      event.waitUntil(performAuthCheck());
    }
  });
}

// Effectuer une v√©rification d'authentification
async function performAuthCheck() {
  try {
    // Ici on pourrait faire une requ√™te de v√©rification au serveur
    // Pour l'instant, on fait confiance aux donn√©es locales
    console.log('‚úÖ V√©rification d\'authentification termin√©e');
    return Promise.resolve();
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification d\'authentification:', error);
    return Promise.reject(error);
  }
}

// Initialisation
console.log('üéØ Service Worker Auth Extension initialis√©');
